{"openapi":"3.1.0","info":{"title":"FastAPI","version":"0.1.0"},"paths":{"/users/signup":{"post":{"tags":["Users"],"summary":"Signup","description":"## User Signup\n\nThis endpoint allows for the creation of a new user account with a unique username and email.\nUpon successful signup, the user's information is stored in the database with a securely hashed password.\n\n### Parameters\n- **user** (UserCreate): The user details required to create an account, including `username`, `email`, and `password`.\n- **db** (Session): Database session dependency injection.\n\n### Returns\n- **201 Created**: Returns the created user's information, excluding sensitive data like the raw password.\n- **UserResponse**: The response model that defines the returned fields of the user object.\n\n### Error Handling\n- **400 Bad Request**: Returned if the username or email already exists in the system.\n- **500 Internal Server Error**: Returned if any other error occurs during the user creation process.\n\n### Example Usage\n- **Request**: `POST /users/signup`\n- **Body**: JSON object with `username`, `email`, and `password`\n- **Response**: User object without sensitive fields.\n\n### Security Notes\n- Passwords are securely hashed before storage to ensure user data protection.","operationId":"signup_users_signup_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserCreate"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/users/profile/":{"get":{"tags":["Users"],"summary":"Get User Profile","description":"## Get Current User Profile\n\nThis endpoint retrieves the profile information of the authenticated user.\n\n### Parameters\n- **db** (Session): The database session dependency.\n- **current_user** (UserValidationSchema): The authenticated user injected as a dependency.\n\n### Returns\n- **200 OK**: Returns the user's profile details as defined in `UserResponse`.\n- **Response Model**: The response model includes fields such as:\n  - `username`: The user's unique username.\n  - `email`: The user's email address.\n  - Other non-sensitive profile information.\n\n### Errors\n- **404 Not Found**: Returned if the user profile is not found in the database.\n- **401 Unauthorized**: Raised if an unauthorized attempt is made to access another user's profile.\n\n### Usage Example\n- **Request**: `GET /users/profile/`\n- **Response**: JSON object with the user's profile information.","operationId":"get_user_profile_users_profile__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/users/profile/update/":{"put":{"tags":["Users"],"summary":"Update User Profile","description":"Updates a user's profile","operationId":"update_user_profile_users_profile_update__put","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserUpdate"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/users/profile/delete/":{"delete":{"tags":["Users"],"summary":"Delete User Profile","description":"## Delete User Profile\n\nThis endpoint permanently deletes the authenticated user's profile.\n\n### Parameters\n- **db** (Session): The database session dependency.\n- **current_user** (UserValidationSchema): The authenticated user who is performing the delete action.\n\n### Returns\n- **204 No Content**: Indicates successful deletion of the user's profile.\n\n### Error Responses\n- **404 Not Found**: Returned if the user's profile does not exist.\n- **401 Unauthorized**: Raised if an unauthorized attempt is made to delete another user's profile.\n- **500 Internal Server Error**: Returned if there is an error during the deletion process.\n\n### Example Usage\n- **Request**: `DELETE /users/profile/delete/`\n- **Response**: No content (204 status), confirming the deletion.\n\n### Important Notes\nThis action is permanent. Ensure that the user is authenticated and aware that deletion is irreversible.","operationId":"delete_user_profile_users_profile_delete__delete","responses":{"204":{"description":"Successful Response"}},"security":[{"OAuth2PasswordBearer":[]}]}},"/users/profile/change_password/":{"put":{"tags":["Users"],"summary":"Update User Password","description":"## Change User Password\n\nThis endpoint updates the password for the authenticated user.\n\n### Parameters\n- **password_change** (PasswordChange): Contains both the `old_password` and `new_password` fields.\n- **db** (Session): The database session dependency.\n- **current_user** (UserValidationSchema): The authenticated user who is attempting to change their password.\n\n### Returns\n- **UserResponse**: The updated user profile, confirming that the password was successfully changed.\n\n### Error Responses\n- **404 Not Found**: If the user is not found in the database.\n- **401 Unauthorized**: If the authenticated user attempts to change another user's password.\n- **403 Forbidden**: If the provided `old_password` is incorrect.\n- **500 Internal Server Error**: For unexpected errors during the password update.\n\n### Example Usage\n- **Request**: `PUT /users/profile/change_password/`\n  ```json\n  {\n      \"old_password\": \"currentpassword123\",\n      \"new_password\": \"newsecurepassword456\"\n  }\n  ```\n- **Response**: User profile data (without the password).\n\n### Important Notes\n- Users must provide their current password to proceed with the password change.\n- This route is only accessible by the authenticated user making the request.\n- Proper error handling ensures sensitive information is protected during validation.","operationId":"update_user_password_users_profile_change_password__put","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PasswordChange"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/stylists/stylists":{"get":{"tags":["Stylists"],"summary":"Get Stylists","description":"## Get All Stylists\n\nThis endpoint retrieves a list of all stylists available in the system.\n\n- **Authorization**: Requires the user to be authenticated.\n- **Returns**: A list of stylist profiles, including their associated services.\n\n### Parameters:\n- **db**: Database session dependency.\n- **current_stylist**: User validation schema that confirms the current user is authenticated.\n\n### Response:\n- **200 OK**: Successfully retrieves the list of stylists.\n- **404 Not Found**: Returned if no stylists are found in the database.\n\n### Example Usage:\n- **Request**: `GET /stylists`\n- **Response**: \n  ```json\n  [\n      {\n          \"id\": 1,\n          \"username\": \"stylist1\",\n          \"email\": \"stylist1@example.com\",\n          \"specialization\": \"Hair Styling\",\n          \"services\": [\n              {\n                  \"service_id\": 1,\n                  \"name\": \"Haircut\",\n                  \"price\": 20.0\n              },\n              ...\n          ]\n      },\n      ...\n  ]\n  ```\n  ### Error Codes:\n- **404 Not Found**: If no stylists are available in the database.\n- **500 Internal Server Error**: If an unexpected error occurs during data retrieval.\n\n### Notes:\n- This endpoint uses `selectinload` to optimize loading of related `services` data, avoiding multiple database queries.","operationId":"get_stylists_stylists_stylists_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/StylistResponse"},"type":"array","title":"Response Get Stylists Stylists Stylists Get"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/stylists/{stylist_id}":{"get":{"tags":["Stylists"],"summary":"Get Stylist","description":"## Update Stylist Password\n\nThis endpoint allows an authenticated stylist to change their password. \n\n- **Authorization**: Requires the stylist to be logged in and authenticated.\n- **Verification**: The stylist must provide their current password, which is verified before the new password is saved.\n\n### Request Body\n- **old_password**: The stylist's current password.\n- **new_password**: The stylist's desired new password.\n\n### Authentication and Authorization\n- The stylist must be logged in to access this endpoint.\n- Only the logged-in stylist can change their password.\n- If the `old_password` does not match, a `403 Forbidden` error is returned.\n\n### Error Codes:\n- **401 Unauthorized**: Returned if a stylist attempts to change another stylist's password.\n- **403 Forbidden**: Returned if the `old_password` provided does not match the current password.\n- **404 Not Found**: Returned if the stylist is not found.\n- **500 Internal Server Error**: Returned if an error occurs during password update.\n\n### Example Usage:\n- **Request**: `PUT /profile/change_password/`\n- **Response**: Returns stylist profile details as confirmation.\n\n### Security Notes:\n- The password is hashed before storing in the database.","operationId":"get_stylist_stylists__stylist_id__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"stylist_id","in":"path","required":true,"schema":{"type":"integer","title":"Stylist Id"}}],"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/StylistResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/stylists/profile/change_password/":{"put":{"tags":["Stylists"],"summary":"Update User Password","description":"## Update Stylist Password\n\nThis endpoint allows an authenticated stylist to change their password. \n\n- **Authorization**: Requires the stylist to be logged in and authenticated.\n- **Verification**: The stylist must provide their current password, which is verified before the new password is saved.\n\n### Request Body\n- **old_password**: The stylist's current password.\n- **new_password**: The stylist's desired new password.\n\n### Authentication and Authorization\n- The stylist must be logged in to access this endpoint.\n- Only the logged-in stylist can change their password.\n- If the `old_password` does not match, a `403 Forbidden` error is returned.\n\n### Error Codes:\n- **401 Unauthorized**: Returned if a stylist attempts to change another stylist's password.\n- **403 Forbidden**: Returned if the `old_password` provided does not match the current password.\n- **404 Not Found**: Returned if the stylist is not found.\n- **500 Internal Server Error**: Returned if an error occurs during password update.\n\n### Example Usage:\n- **Request**: `PUT /profile/change_password/`\n- **Response**: Returns stylist profile details as confirmation.\n\n### Security Notes:\n- The password is hashed before storing in the database.","operationId":"update_user_password_stylists_profile_change_password__put","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PasswordChange"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/StylistResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/stylists/stylists/search":{"get":{"tags":["Stylists"],"summary":"Search Stylists By Specialization","description":"## Search Stylists by Specialization\n\nThis endpoint allows users to search for stylists based on their specialization.\n\n- **specialization**: A keyword for filtering stylists by expertise. \n- Returns a list of stylists whose specialization contains the keyword.\n- Useful for finding stylists with specific skills, like 'haircut', 'colorist', etc.\n\n### Example Usage:\n- **Request**: `GET /stylists/search?specialization=haircut`\n- **Response**: List of stylist profiles with relevant expertise.\n\n### Error Codes:\n- **404**: No stylists found with the specified specialization.","operationId":"search_stylists_by_specialization_stylists_stylists_search_get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"specialization","in":"query","required":true,"schema":{"type":"string","title":"Specialization"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/StylistResponse"},"title":"Response Search Stylists By Specialization Stylists Stylists Search Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/stylists/dashboard/":{"get":{"tags":["Stylists"],"summary":"Stylist Dashboard","description":"## Stylist Dashboard\n\nThis endpoint provides access to the dashboard of a specific stylist. \n\n- **Authorization**: Requires an authenticated stylist user.\n- **Response**: Returns a message containing the stylist's username.\n\n### Authentication and Authorization\n- The endpoint checks the identity of the stylist attempting to access the dashboard.\n- Only the stylist whose ID matches the `current_stylist`'s ID is authorized.\n- If unauthorized access is detected, a `401 Unauthorized` error is returned.\n\n### Error Codes:\n- **401 Unauthorized**: Returned if a stylist tries to access a dashboard that is not their own.\n- **404 Not Found**: Returned if the stylist's profile does not exist.\n\n### Example Usage:\n- **Request**: `GET /dashboard/`\n- **Response**: `{ \"Dashboard of\": \"stylist_username\" }`","operationId":"stylist_dashboard_stylists_dashboard__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/login":{"post":{"tags":["Authentication"],"summary":"Login","description":"Authenticate a user and generate a Bearer token.\n\nThis endpoint allows users (Admins, Stylists, and Clients) to log in to the application by providing\ntheir username and password. The system will verify the credentials across the following tables:\n- Admins table\n- Stylists table\n- Clients (User) table\n\nIf the credentials are correct, an access token is generated and returned for use in subsequent requests.\n\nParameters:\n- user_credentials: The login credentials (username and password) provided by the user.\n- db: The database session dependency for querying the database.\n\nReturns:\n- A dictionary containing the `access_token` and its `token_type` (bearer).\n\nRaises:\n- HTTPException: If the provided credentials are invalid or no matching user is found.","operationId":"login_login_post","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_login_login_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Token"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/admins/create_services":{"post":{"tags":["Admins"],"summary":"Create Services","description":"Create new services in the system.\n\nThis endpoint allows an admin to add one or more services to the database. The request must include\na list of services, each containing the service name, description, duration, and price. The system\nchecks if a service with the same name already exists before adding the new service.\n\nParameters:\n- services: A list of service details (name, description, duration, price) to be added.\n- db: The database session for querying and interacting with the database.\n- current_admin: The currently authenticated admin user, checked via dependency injection.\n\nReturns:\n- A list of `ServiceResponse` objects representing the successfully created services.\n\nRaises:\n- HTTPException: If the user is not an admin, if a service with the same name already exists,\n  or if there is an internal server error during the database operation.","operationId":"create_services_admins_create_services_post","requestBody":{"content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/ServiceCreate"},"type":"array","title":"Services"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/ServiceResponse"},"type":"array","title":"Response Create Services Admins Create Services Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/admins/update_service":{"put":{"tags":["Admins"],"summary":"Update Service","description":"Update the details of an existing service.\n\nThis endpoint allows an admin to update the details of a specific service. The service can be \nupdated with new values for its `name`, `description`, `duration`, `price`, and associated `stylists`. \nIf a stylist is provided, their associations to the service will be updated.\n\nParameters:\n- service_id: The ID of the service to be updated.\n- service_data: The new service data containing updated information for the service.\n- db: The database session for querying and interacting with the database.\n- current_admin: The currently authenticated admin user, checked via dependency injection.\n\nReturns:\n- A `ServiceResponse` object representing the updated service, including the `service_id`, `name`, \n  `description`, `duration`, `price`, and the list of associated stylists.\n\nRaises:\n- HTTPException:\n    - If the user is not an admin, a `403 Forbidden` error is raised.\n    - If the service is not found, a `404 Not Found` error is raised.\n    - If a stylist ID is provided that does not exist, a `404 Not Found` error is raised.","operationId":"update_service_admins_update_service_put","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"service_id","in":"query","required":true,"schema":{"type":"integer","title":"Service Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceUpdate"}}}},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/admins/delete_service/{service_id}":{"delete":{"tags":["Admins"],"summary":"Delete Service","description":"Delete a service by its ID.\n\nThis endpoint allows an admin to delete a specific service from the system. Before deleting,\nthe service's associations with stylists are removed from the relationship table. Afterward,\nthe service is deleted from the database.\n\nParameters:\n- service_id: The ID of the service to be deleted.\n- db: The database session for querying and interacting with the database.\n- current_admin: The currently authenticated admin user, checked via dependency injection.\n\nReturns:\n- A confirmation message indicating the service was deleted successfully.\n\nRaises:\n- HTTPException:\n    - If the user is not an admin, a `403 Forbidden` error is raised.\n    - If the service is not found, a `404 Not Found` error is raised.","operationId":"delete_service_admins_delete_service__service_id__delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"service_id","in":"path","required":true,"schema":{"type":"integer","title":"Service Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/admins/create_stylist":{"post":{"tags":["Admins"],"summary":"Create Stylist","description":"Create one or more stylists and associate them with services.\n\nThis endpoint allows an admin to create new stylist accounts, hash their passwords, and associate them with services. The newly created stylist data, including their associated services, is returned in the response.\n\nParameters:\n- stylists_data: A list of stylist data to be created. Each stylist includes username, email, password, bio, and specialization.\n- db: The database session for querying and interacting with the database.\n- current_admin: The currently authenticated admin user, checked via dependency injection.\n\nReturns:\n- A list of stylist response data, including associated services, for each stylist created.\n\nRaises:\n- HTTPException:\n    - If the user is not an admin, a `403 Forbidden` error is raised.","operationId":"create_stylist_admins_create_stylist_post","requestBody":{"content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/StylistCreate"},"type":"array","title":"Stylists Data"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/StylistResponse"},"type":"array","title":"Response Create Stylist Admins Create Stylist Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/admins/update_stylist/":{"put":{"tags":["Admins"],"summary":"Update Stylist","description":"Update the details of an existing stylist.\n\nThis endpoint allows an admin to update a stylist's information, including their username, email, bio, specialization, and associated services. Only admins are authorized to update stylist details.\n\nParameters:\n- stylist_id: The ID of the stylist to be updated.\n- stylist_data: The new stylist data to update, including optional fields such as username, email, bio, specialization, and associated services.\n- db: The database session for querying and interacting with the database.\n- current_admin: The currently authenticated admin user, checked via dependency injection.\n\nReturns:\n- The updated stylist information, including their associated services.\n\nRaises:\n- HTTPException:\n    - If the user is not an admin, a `403 Forbidden` error is raised.\n    - If the stylist with the provided `stylist_id` is not found, a `404 Not Found` error is raised.\n    - If any service ID in the `service_ids` list is not found, a `404 Not Found` error is raised.","operationId":"update_stylist_admins_update_stylist__put","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"stylist_id","in":"query","required":true,"schema":{"type":"integer","title":"Stylist Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/StylistUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/StylistResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/admins/delete_stylist/":{"delete":{"tags":["Admins"],"summary":"Delete Stylist","description":"Delete a stylist from the system.\n\nThis endpoint allows an admin to delete a stylist from the system. The stylist's associated services are also removed from the relationship table. Only admins are authorized to delete stylists.\n\nParameters:\n- stylist_id: The ID of the stylist to be deleted.\n- db: The database session for querying and interacting with the database.\n- current_admin: The currently authenticated admin user, checked via dependency injection.\n\nReturns:\n- A success message indicating that the stylist has been successfully deleted.\n\nRaises:\n- HTTPException:\n    - If the user is not an admin, a `403 Forbidden` error is raised.\n    - If the stylist with the provided `stylist_id` is not found, a `404 Not Found` error is raised.","operationId":"delete_stylist_admins_delete_stylist__delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"stylist_id","in":"query","required":true,"schema":{"type":"integer","title":"Stylist Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/admins/create_admin":{"post":{"tags":["Admins"],"summary":"Register Admin","description":"Register a new admin user.\n\nThis endpoint allows an existing admin to register a new admin user. The provided username and email are checked to ensure that no other admin with the same username or email exists. Passwords are hashed before being saved. Only admins are authorized to add new admin users.\n\nParameters:\n- admin: The data for the new admin user, including username, email, and password.\n- db: The database session for querying and interacting with the database.\n- current_admin: The currently authenticated admin user, validated via dependency injection to ensure that the current user is an admin.\n\nReturns:\n- The newly created admin user, including their username, email, and other details.\n\nRaises:\n- HTTPException:\n    - If the current user is not an admin, a `403 Forbidden` error is raised.\n    - If an admin with the same username or email already exists, a `400 Bad Request` error is raised.","operationId":"register_admin_admins_create_admin_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AdminCreate"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AdminResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/admins/delete_admin/{admin_id}":{"delete":{"tags":["Admins"],"summary":"Delete Admin","description":"Delete an admin user.\n\nThis endpoint allows an existing admin to delete another admin user. It performs several checks:\n- Ensures that only admins can delete other admins.\n- Prevents an admin from deleting their own account.\n- Verifies that the specified admin exists before deletion.\n\nParameters:\n- admin_id: The ID of the admin to be deleted.\n- db: The database session used to interact with the database.\n- current_admin: The currently authenticated admin user, validated through dependency injection to ensure the current user is an admin.\n\nReturns:\n- A success message indicating the admin was successfully deleted.\n\nRaises:\n- HTTPException:\n    - If the current user is not an admin, a `403 Forbidden` error is raised.\n    - If the current user attempts to delete their own admin account, a `400 Bad Request` error is raised.\n    - If the specified admin does not exist, a `404 Not Found` error is raised.","operationId":"delete_admin_admins_delete_admin__admin_id__delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"admin_id","in":"path","required":true,"schema":{"type":"integer","title":"Admin Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/admins/accept/{booking_id}":{"post":{"tags":["Admins"],"summary":"Accept Booking","description":"Admin verifies and accepts a booking request.\n\nThis endpoint allows an authenticated admin to verify and accept a booking request. It performs multiple checks:\n- Ensures the service associated with the booking exists.\n- Verifies the stylist exists.\n- Checks that the current user is an admin.\n- Verifies the booking exists and is still in a \"pending\" state.\n- Updates the booking status to \"confirmed\" once accepted.\n\nParameters:\n- booking_id: The ID of the booking to accept.\n- stylist_id: The ID of the stylist to be associated with the booking.\n- db: The database session used for querying and committing changes.\n- current_user: The currently authenticated user, validated to be an admin.\n\nReturns:\n- The updated booking information with the status changed to \"confirmed\".\n\nRaises:\n- HTTPException:\n    - If the service or stylist does not exist, a `404 Not Found` error is raised.\n    - If the current user is not an admin, a `403 Forbidden` error is raised.\n    - If the booking does not exist or is not in a \"pending\" state, a `404 Not Found` or `400 Bad Request` error is raised.","operationId":"accept_booking_admins_accept__booking_id__post","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"booking_id","in":"path","required":true,"schema":{"type":"integer","title":"Booking Id"}},{"name":"stylist_id","in":"query","required":true,"schema":{"type":"integer","title":"Stylist Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BookingResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/admins/reject/":{"post":{"tags":["Admins"],"summary":"Reject Booking","description":"Admin rejects a booking request.\n\nThis endpoint allows an authenticated admin to reject a booking request. It performs several checks:\n- Ensures the booking exists.\n- Verifies the current user is an admin.\n- Checks that the booking is still in the \"pending\" state (not confirmed or rejected).\n- Updates the booking status to \"rejected\" upon rejection.\n\nParameters:\n- booking_id: The ID of the booking to reject.\n- db: The database session used for querying and committing changes.\n- current_admin: The currently authenticated user, validated to be an admin.\n\nReturns:\n- The updated booking information with the status changed to \"rejected\".\n\nRaises:\n- HTTPException:\n    - If the booking does not exist, a `404 Not Found` error is raised.\n    - If the current user is not an admin, a `403 Forbidden` error is raised.\n    - If the booking is not in a \"pending\" state, a `400 Bad Request` error is raised.","operationId":"reject_booking_admins_reject__post","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"booking_id","in":"query","required":true,"schema":{"type":"integer","title":"Booking Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BookingResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/admins/complete/{booking_id}":{"post":{"tags":["Admins"],"summary":"Complete Booking","description":"Admin marks a booking as completed.\n\nThis endpoint allows an authenticated admin to mark a booking as completed. It performs several checks:\n- Ensures the booking exists.\n- Verifies the current user is an admin.\n- Ensures the booking is in the \"confirmed\" state before allowing it to be marked as completed.\n- Updates the booking status to \"completed\" once the checks pass.\n\nParameters:\n- booking_id: The ID of the booking to complete.\n- db: The database session used for querying and committing changes.\n- current_admin: The currently authenticated user, validated to be an admin.\n\nReturns:\n- The updated booking information with the status changed to \"completed\".\n\nRaises:\n- HTTPException:\n    - If the booking does not exist, a `404 Not Found` error is raised.\n    - If the current user is not an admin, a `403 Forbidden` error is raised.\n    - If the booking is not in a \"confirmed\" state, a `400 Bad Request` error is raised.","operationId":"complete_booking_admins_complete__booking_id__post","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"booking_id","in":"path","required":true,"schema":{"type":"integer","title":"Booking Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BookingResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/admins/bookings":{"get":{"tags":["Admins"],"summary":"Get All Bookings","description":"Retrieve all bookings in the system.\n\nThis endpoint allows an authenticated admin to retrieve a list of all bookings in the system. \nIt performs the following steps:\n- Ensures the current user is an admin.\n- Retrieves all bookings from the database.\n- If no bookings are found, it raises a `404 Not Found` error.\n\nParameters:\n- db: The database session used for querying the bookings.\n- current_admin: The currently authenticated admin user, validated via dependency injection.\n\nReturns:\n- A list of all bookings in the system.\n\nRaises:\n- HTTPException:\n    - If no bookings are found, a `404 Not Found` error is raised.","operationId":"get_all_bookings_admins_bookings_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/BookingResponse"},"type":"array","title":"Response Get All Bookings Admins Bookings Get"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/admins/users":{"get":{"tags":["Admins"],"summary":"View All Users","description":"Retrieve all users in the system.\n\nThis endpoint allows an authenticated admin to retrieve a list of all users (including both stylists and non-stylists) in the system. \nIt performs the following steps:\n- Ensures the current user is an admin.\n- Retrieves all users from the database.\n\nParameters:\n- db: The database session used for querying the users.\n- current_admin: The currently authenticated admin user, validated via dependency injection.\n\nReturns:\n- A list of all users in the system.","operationId":"view_all_users_admins_users_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/UserResponse"},"type":"array","title":"Response View All Users Admins Users Get"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/admins/stylists":{"get":{"tags":["Admins"],"summary":"View All Stylists","description":"Retrieve all stylists in the system.\n\nThis endpoint allows an authenticated admin to retrieve a list of all stylists in the system. \nIt performs the following steps:\n- Ensures the current user is an admin.\n- Retrieves all stylists from the database.\n\nParameters:\n- db: The database session used for querying the stylists.\n- current_admin: The currently authenticated admin user, validated via dependency injection.\n\nReturns:\n- A list of all stylists in the system.","operationId":"view_all_stylists_admins_stylists_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/StylistResponse"},"type":"array","title":"Response View All Stylists Admins Stylists Get"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/bookings/create":{"post":{"tags":["Bookings"],"summary":"Create Service Booking","description":"## Create a Service Booking\n\nThis endpoint allows a client to create a booking for a service with a stylist. It checks that the user is a client, \nthe service and stylist exist, the stylist offers the service, the appointment time is in the future, and that there are no conflicting bookings.\n\n### Parameters\n- **booking** (BookingCreate): The booking details including the service, stylist, and appointment time.\n- **db** (Session): The database session dependency.\n- **current_user** (UserValidationSchema): The currently authenticated user.\n\n### Returns\n- **BookingResponse**: A response containing the booking details, including the booking ID, user, stylist, service, and appointment time.\n\n### Error Responses\n- **403 Forbidden**: If the user is not a client.\n- **404 Not Found**: If the service or stylist does not exist.\n- **400 Bad Request**: If the stylist does not offer the service, the appointment time is in the past, or the stylist is already booked at the specified time.\n\n### Example Usage\n- **Request**:\n  ```json\n  {\n    \"service_id\": 1,\n    \"stylist_id\": 2,\n    \"appointment_time\": \"2024-11-20T10:00:00+00:00\"\n  }\n  ```\n- **Response**:\n  ```json\n  {\n    \"id\": 1,\n    \"user_id\": 1,\n    \"stylist_id\": 2,\n    \"stylist_name\": \"Jane Doe\",\n    \"service_id\": 1,\n    \"service_name\": \"Haircut\",\n    \"appointment_time\": \"2024-11-20T10:00:00+00:00\",\n    \"status\": \"confirmed\"\n  }\n  ```\n\n### Important Notes\n- Only clients can create bookings. Other roles will receive a **403 Forbidden** error.\n- The appointment time must be in the future.\n- The stylist must offer the service and be available at the specified time.","operationId":"create_service_booking_bookings_create_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BookingCreate"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BookingResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/bookings/create/for/targeted_user":{"post":{"tags":["Bookings"],"summary":"Create Service Booking","description":"## Create a Service Booking for a Targeted User\n\nThis endpoint allows a stylist or an admin to create a service booking for a user. The booking request will be validated to ensure that:\n- The user is authorized to make the booking (stylist or admin).\n- The specified service and stylist exist.\n- The stylist offers the requested service.\n- The appointment time is in the future.\n- The stylist is available at the specified time.\n\n### Parameters\n- **booking_for_targeted_user** (BookingCreateForUser): The booking details, including service, stylist, and appointment time for the targeted user.\n- **db** (Session): The database session dependency.\n- **current_user** (UserValidationSchema): The currently authenticated user (stylist or admin).\n\n### Returns\n- **BookingResponse**: The booking details, including the booking ID, user, stylist, service, and appointment time.\n\n### Error Responses\n- **404 Not Found**: If the service or stylist does not exist.\n- **400 Bad Request**: If the stylist does not offer the service, the appointment time is in the past, or the stylist is already booked at the specified time.\n\n### Example Usage\n- **Request**:\n  ```json\n  {\n    \"service_id\": 1,\n    \"stylist_id\": 2,\n    \"appointment_time\": \"2024-11-20T10:00:00+00:00\",\n    \"user_id\": 3\n  }\n  ```\n- **Response**:\n  ```json\n  {\n    \"id\": 1,\n    \"user_id\": 3,\n    \"stylist_id\": 2,\n    \"stylist_name\": \"Jane Doe\",\n    \"service_id\": 1,\n    \"service_name\": \"Haircut\",\n    \"appointment_time\": \"2024-11-20T10:00:00+00:00\",\n    \"status\": \"confirmed\"\n  }\n  ```\n\n### Important Notes\n- Only stylists and admins can create bookings for users.\n- The appointment time must be in the future.\n- The stylist must be available for the service and at the specified time.","operationId":"create_service_booking_bookings_create_for_targeted_user_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BookingCreateForUser"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BookingResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/bookings/update":{"put":{"tags":["Bookings"],"summary":"Update Booking","description":"Update a booking by ID.\n\nThis endpoint allows the user to update a booking, with the following checks:\n- The booking must exist.\n- Only the user who created the booking can update it.\n- The appointment time must be in the future.\n- The stylist must not have conflicting bookings at the new time.\n- Bookings that are confirmed or completed cannot be updated.\n\n### Parameters\n- **booking_id** (int): The ID of the booking to update.\n- **updated_booking** (BookingUpdate): The updated booking details (appointment time, etc.).\n\n### Returns\n- **BookingResponse**: The updated booking details.\n\n### Error Responses\n- **404 Not Found**: If the booking does not exist.\n- **403 Forbidden**: If the user is not authorized to update the booking.\n- **400 Bad Request**: If the appointment time is in the past, or if there is a scheduling conflict, or if the booking status is already confirmed or completed.\n\n### Example Request:\n```json\n{\n  \"appointment_time\": \"2024-11-25T14:00:00+00:00\"\n}\n```\n\n### Example Response:\n```json\n{\n  \"id\": 1,\n  \"user_id\": 2,\n  \"stylist_id\": 3,\n  \"stylist_name\": \"Jane Doe\",\n  \"service_id\": 1,\n  \"service_name\": \"Haircut\",\n  \"appointment_time\": \"2024-11-25T14:00:00+00:00\",\n  \"status\": \"confirmed\"\n}\n```","operationId":"update_booking_bookings_update_put","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"booking_id","in":"query","required":true,"schema":{"type":"integer","title":"Booking Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BookingUpdate"}}}},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BookingResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/bookings/accept/":{"post":{"tags":["Bookings"],"summary":"Accept Booking","description":"Stylist accepts a booking request.\n\nThis endpoint allows a stylist to accept a booking request. It ensures:\n- The booking exists.\n- The stylist is authorized to accept the booking.\n- The booking is in a \"pending\" state (i.e., not already confirmed or rejected).\n\n### Parameters\n- **booking_id** (int): The ID of the booking to accept.\n\n### Returns\n- **BookingResponse**: The updated booking details.\n\n### Error Responses\n- **404 Not Found**: If the booking does not exist.\n- **403 Forbidden**: If the stylist is not authorized to accept the booking.\n- **400 Bad Request**: If the booking is already confirmed or rejected.\n\n### Example Request:\n```json\n{\n  \"booking_id\": 123\n}\n```\n\n### Example Response:\n```json\n{\n  \"id\": 123,\n  \"user_id\": 1,\n  \"stylist_id\": 2,\n  \"stylist_name\": \"Jane Doe\",\n  \"service_id\": 3,\n  \"service_name\": \"Haircut\",\n  \"appointment_time\": \"2024-11-25T14:00:00+00:00\",\n  \"status\": \"confirmed\"\n}\n```","operationId":"accept_booking_bookings_accept__post","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"booking_id","in":"query","required":true,"schema":{"type":"integer","title":"Booking Id"}}],"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BookingResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/bookings/reject/{booking_id}":{"post":{"tags":["Bookings"],"summary":"Reject Booking","description":"Stylist rejects a booking request.\n\nThis endpoint allows a stylist to reject a booking request. It ensures:\n- The booking exists.\n- The stylist is authorized to reject the booking.\n- The booking is in a \"pending\" state (i.e., not already confirmed or rejected).\n\n### Parameters\n- **booking_id** (int): The ID of the booking to reject.\n\n### Returns\n- **BookingResponse**: The updated booking details.\n\n### Error Responses\n- **404 Not Found**: If the booking does not exist.\n- **403 Forbidden**: If the stylist is not authorized to reject the booking.\n- **400 Bad Request**: If the booking is already confirmed or rejected.\n\n### Example Request:\n```json\n{\n  \"booking_id\": 123\n}\n```\n\n### Example Response:\n```json\n{\n  \"id\": 123,\n  \"user_id\": 1,\n  \"stylist_id\": 2,\n  \"stylist_name\": \"Jane Doe\",\n  \"service_id\": 3,\n  \"service_name\": \"Haircut\",\n  \"appointment_time\": \"2024-11-25T14:00:00+00:00\",\n  \"status\": \"rejected\"\n}","operationId":"reject_booking_bookings_reject__booking_id__post","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"booking_id","in":"path","required":true,"schema":{"type":"integer","title":"Booking Id"}}],"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BookingResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/bookings/delete/{booking_id}":{"delete":{"tags":["Bookings"],"summary":"Delete Booking","description":"Delete a booking by ID.\n\nThis endpoint allows a user to delete a booking. The user must either be the creator of the booking or an admin.\n\n### Parameters\n- **booking_id** (int): The ID of the booking to delete.\n\n### Returns\n- **204 No Content**: If the booking was successfully deleted.\n\n### Error Responses\n- **404 Not Found**: If the booking does not exist.\n- **403 Forbidden**: If the user is not authorized to delete the booking.\n\n### Example Request:\n```json\n{\n  \"booking_id\": 123\n}\n```\n\n### Example Response:\nHTTP status code: `204 No Content`","operationId":"delete_booking_bookings_delete__booking_id__delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"booking_id","in":"path","required":true,"schema":{"type":"integer","title":"Booking Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/bookings/complete/{booking_id}":{"post":{"tags":["Bookings"],"summary":"Complete Booking","description":"Marks a booking as completed by the assigned stylist.\n\nOnly the stylist who was assigned to the booking can mark it as completed. The booking must be in a confirmed state before it can be completed.\n\n### Parameters:\n- **booking_id** (int): The ID of the booking to mark as completed.\n\n### Returns:\n- **BookingResponse**: The updated booking details.\n\n### Errors:\n- **404 Not Found**: If the booking does not exist.\n- **403 Forbidden**: If the stylist is not authorized to complete the booking.\n- **400 Bad Request**: If the booking is already completed or not in a confirmed state.","operationId":"complete_booking_bookings_complete__booking_id__post","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"booking_id","in":"path","required":true,"schema":{"type":"integer","title":"Booking Id"}}],"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BookingResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/bookings/":{"get":{"tags":["Bookings"],"summary":"Get Bookings","description":"Fetch all past and upcoming bookings for the current user.\n\nDepending on the user's role (either 'user' or 'stylist'), it retrieves:\n- For users: their previous and upcoming bookings based on their user ID.\n- For stylists: their previous and upcoming bookings based on their stylist ID.\n\nBoth previous and upcoming bookings are filtered by their respective appointment time, and results \nare sorted accordingly:\n- Past bookings are ordered by appointment time in descending order.\n- Upcoming bookings are ordered by appointment time in ascending order.\n\nAdditionally, each booking is enriched with:\n- The stylist's username.\n- The service's name.\n\nParameters:\n- db: The database session dependency.\n- current_user: The current authenticated user (either stylist or regular user).\n\nReturns:\n- A list of all previous and upcoming bookings enriched with stylist and service information.","operationId":"get_bookings_bookings__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/BookingResponse"},"type":"array","title":"Response Get Bookings Bookings  Get"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/services/":{"get":{"tags":["Services"],"summary":"Get Services","description":"## Get All Services\n\nThis endpoint retrieves a list of all available services, including their details like name, \ndescription, duration, price, creation date, and the associated stylists (if available).\n\n### Parameters\n- **db** (Session): The database session dependency.\n\n### Returns\n- **List[ServiceResponse]**: A list of service details, where each service includes:\n  - `service_id`: The unique identifier of the service.\n  - `name`: The name of the service.\n  - `description`: A description of the service.\n  - `duration`: The duration of the service.\n  - `price`: The price of the service.\n  - `created_at`: The timestamp when the service was created.\n  - `stylists`: A list of stylists associated with the service.\n\n### Error Responses\n- **404 Not Found**: If no services are found in the database.","operationId":"get_services_services__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/ServiceResponse"},"type":"array","title":"Response Get Services Services  Get"}}}}}}},"/services/{service_id}":{"get":{"tags":["Services"],"summary":"Get Service","description":"## Get Service Details\n\nThis endpoint retrieves the details of a service, including the service's name, description,\nduration, price, creation date, and the list of associated stylists (if available).\n\n### Parameters\n- **service_id** (int): The unique identifier for the service whose details are to be retrieved.\n- **db** (Session): The database session dependency.\n\n### Returns\n- **ServiceResponse**: A response model containing the service details, including:\n  - `service_id`: The unique identifier of the service.\n  - `name`: The name of the service.\n  - `description`: A description of the service.\n  - `duration`: The duration of the service.\n  - `price`: The price of the service.\n  - `created_at`: The timestamp when the service was created.\n  - `stylists`: A list of stylists associated with the service.\n\n### Error Responses\n- **404 Not Found**: If the service with the specified ID does not exist.\n\n### Example Usage\n- **Request**: `GET /services/{service_id}`\n- **Response**:\n  ```json\n  {\n    \"service_id\": 1,\n    \"name\": \"Haircut\",\n    \"description\": \"A professional haircut service\",\n    \"duration\": 30,\n    \"price\": 15.99,\n    \"created_at\": \"2024-11-15T12:00:00\",\n    \"stylists\": [\n      {\n        \"stylist_id\": 1,\n        \"name\": \"John Doe\",\n        \"experience\": \"5 years\"\n      }\n    ]\n  }\n  ```\n\n### Important Notes\n- If the service has no associated stylists, the `stylists` field will be an empty list.","operationId":"get_service_services__service_id__get","parameters":[{"name":"service_id","in":"path","required":true,"schema":{"type":"integer","title":"Service Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/reviews/stylist":{"post":{"tags":["Reviews"],"summary":"Create Review","description":"## Create Stylist Review\n\nThis endpoint enables authenticated clients to submit a review for a stylist. The review includes a rating (1-5) and optional text. Only clients are allowed to submit reviews.\n\n### Parameters\n- **review** (ReviewCreate): The data required to create a review, including `stylist_id`, `rating`, and `review_text`.\n- **db** (Session): The database session dependency.\n- **current_user** (UserValidationSchema): The authenticated user who is submitting the review.\n\n### Returns\n- **ReviewResponse**: The newly created review, including the stylist's ID, rating, review text, and timestamp.\n\n### Error Responses\n- **403 Forbidden**: If the user is not a client (i.e., unauthorized role).\n- **404 Not Found**: If either the stylist or user does not exist.\n- **400 Bad Request**: If the provided rating is outside the 1-5 range.\n- **500 Internal Server Error**: If an unexpected error occurs during review creation.\n\n### Example Usage\n- **Request**: `POST /stylist`\n  ```json\n  {\n      \"stylist_id\": 1,\n      \"rating\": 5,\n      \"review_text\": \"Excellent service, highly recommend!\"\n  }\n  ```\n- **Response**: Newly created review details:\n  ```json\n  {\n      \"id\": 1,\n      \"user_id\": 123,\n      \"stylist_id\": 1,\n      \"rating\": 5,\n      \"review_text\": \"Excellent service, highly recommend!\",\n      \"created_at\": \"2024-11-14T12:34:56\"\n  }\n  ```\n\n### Important Notes\n- Only users with the role of `client` are allowed to submit reviews.\n- Ratings must be between 1 and 5.","operationId":"create_review_reviews_stylist_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ReviewCreate"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ReviewResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/reviews/average_rating":{"get":{"tags":["Reviews"],"summary":"Stylist Average Rating","description":"## Get Stylist's Average Rating\n\nThis endpoint calculates the average rating for a stylist based on the reviews they have received.\nThe rating is calculated as an average of all the reviews associated with the stylist. If no reviews are found,\na rating of 0.0 is returned.\n\n### Parameters\n- **stylist_id** (int): The unique identifier for the stylist whose average rating is to be retrieved.\n- **db** (Session): The database session dependency.\n\n### Returns\n- **float**: The average rating for the stylist, rounded to two decimal places. If no reviews exist, the rating is 0.0.\n\n### Error Responses\n- **500 Internal Server Error**: If there is an issue with calculating the average rating due to a database error.\n\n### Example Usage\n- **Request**: `GET /average_rating?stylist_id=1`\n- **Response**:\n  ```json\n  4.5\n  ```\n\n### Important Notes\n- The average rating is calculated based on all the reviews associated with the stylist's ID.\n- If no reviews exist for the stylist, the function returns a rating of 0.0.","operationId":"stylist_average_rating_reviews_average_rating_get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"stylist_id","in":"query","required":true,"schema":{"type":"integer","title":"Stylist Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"number","title":"Response Stylist Average Rating Reviews Average Rating Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/":{"get":{"summary":"Homepage","operationId":"homePage__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}}},"components":{"schemas":{"AdminCreate":{"properties":{"username":{"type":"string","title":"Username"},"email":{"type":"string","format":"email","title":"Email"},"password":{"type":"string","title":"Password"}},"type":"object","required":["username","email","password"],"title":"AdminCreate"},"AdminResponse":{"properties":{"id":{"type":"integer","title":"Id"},"username":{"type":"string","title":"Username"},"email":{"type":"string","format":"email","title":"Email"},"created_at":{"type":"string","format":"date-time","title":"Created At"}},"type":"object","required":["id","username","email","created_at"],"title":"AdminResponse"},"Body_login_login_post":{"properties":{"grant_type":{"anyOf":[{"type":"string","pattern":"password"},{"type":"null"}],"title":"Grant Type"},"username":{"type":"string","title":"Username"},"password":{"type":"string","title":"Password"},"scope":{"type":"string","title":"Scope","default":""},"client_id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Client Id"},"client_secret":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Client Secret"}},"type":"object","required":["username","password"],"title":"Body_login_login_post"},"BookingCreate":{"properties":{"stylist_id":{"type":"integer","title":"Stylist Id"},"service_id":{"type":"integer","title":"Service Id"},"appointment_time":{"type":"string","format":"date-time","title":"Appointment Time"}},"type":"object","required":["stylist_id","service_id","appointment_time"],"title":"BookingCreate"},"BookingCreateForUser":{"properties":{"user_id":{"type":"integer","title":"User Id"},"stylist_id":{"type":"integer","title":"Stylist Id"},"service_id":{"type":"integer","title":"Service Id"},"appointment_time":{"type":"string","format":"date-time","title":"Appointment Time"}},"type":"object","required":["user_id","stylist_id","service_id","appointment_time"],"title":"BookingCreateForUser"},"BookingResponse":{"properties":{"id":{"type":"integer","title":"Id"},"user_id":{"type":"integer","title":"User Id"},"stylist_id":{"type":"integer","title":"Stylist Id"},"service_id":{"type":"integer","title":"Service Id"},"appointment_time":{"type":"string","format":"date-time","title":"Appointment Time"},"status":{"type":"string","title":"Status"},"stylist_name":{"type":"string","title":"Stylist Name"},"service_name":{"type":"string","title":"Service Name"}},"type":"object","required":["id","user_id","stylist_id","service_id","appointment_time","status","stylist_name","service_name"],"title":"BookingResponse"},"BookingUpdate":{"properties":{"stylist_id":{"type":"integer","title":"Stylist Id"},"service_id":{"type":"integer","title":"Service Id"},"appointment_time":{"type":"string","format":"date-time","title":"Appointment Time"}},"type":"object","required":["stylist_id","service_id","appointment_time"],"title":"BookingUpdate"},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"PasswordChange":{"properties":{"old_password":{"type":"string","title":"Old Password"},"new_password":{"type":"string","title":"New Password"}},"type":"object","required":["old_password","new_password"],"title":"PasswordChange"},"ReviewCreate":{"properties":{"stylist_id":{"type":"integer","title":"Stylist Id"},"rating":{"anyOf":[{"type":"number","maximum":5.0,"minimum":1.0},{"type":"string"}],"title":"Rating"},"review_text":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Review Text"}},"type":"object","required":["stylist_id","rating"],"title":"ReviewCreate"},"ReviewResponse":{"properties":{"id":{"type":"integer","title":"Id"},"user_id":{"type":"integer","title":"User Id"},"stylist_id":{"type":"integer","title":"Stylist Id"},"rating":{"type":"number","title":"Rating"},"created_at":{"type":"string","format":"date-time","title":"Created At"},"review_text":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Review Text"}},"type":"object","required":["id","user_id","stylist_id","rating","created_at"],"title":"ReviewResponse"},"ServiceCreate":{"properties":{"name":{"type":"string","title":"Name"},"description":{"type":"string","title":"Description"},"duration":{"type":"number","title":"Duration"},"price":{"type":"number","title":"Price"}},"type":"object","required":["name","description","duration","price"],"title":"ServiceCreate"},"ServiceResponse":{"properties":{"service_id":{"type":"integer","title":"Service Id"},"name":{"type":"string","title":"Name"},"description":{"type":"string","title":"Description"},"duration":{"type":"integer","title":"Duration"},"price":{"type":"number","title":"Price"},"created_at":{"type":"string","format":"date-time","title":"Created At"}},"type":"object","required":["service_id","name","description","duration","price","created_at"],"title":"ServiceResponse"},"ServiceUpdate":{"properties":{"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"description":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Description"},"duration":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Duration"},"price":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Price"},"stylists":{"anyOf":[{"items":{"type":"integer"},"type":"array"},{"type":"null"}],"title":"Stylists"}},"type":"object","title":"ServiceUpdate"},"StylistCreate":{"properties":{"username":{"type":"string","title":"Username"},"email":{"type":"string","format":"email","title":"Email"},"password":{"type":"string","title":"Password"},"bio":{"type":"string","title":"Bio"},"specialization":{"type":"string","title":"Specialization"}},"type":"object","required":["username","email","password","bio","specialization"],"title":"StylistCreate"},"StylistResponse":{"properties":{"id":{"type":"integer","title":"Id"},"username":{"type":"string","title":"Username"},"email":{"type":"string","format":"email","title":"Email"},"bio":{"type":"string","title":"Bio"},"specialization":{"type":"string","title":"Specialization"},"active":{"type":"boolean","title":"Active"},"services":{"items":{"$ref":"#/components/schemas/ServiceResponse"},"type":"array","title":"Services"}},"type":"object","required":["id","username","email","bio","specialization","active","services"],"title":"StylistResponse"},"StylistUpdate":{"properties":{"username":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Username"},"email":{"anyOf":[{"type":"string","format":"email"},{"type":"null"}],"title":"Email"},"bio":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Bio"},"specialization":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Specialization"},"service_ids":{"anyOf":[{"items":{"type":"integer"},"type":"array"},{"type":"null"}],"title":"Service Ids"}},"type":"object","required":["username","email","bio","specialization","service_ids"],"title":"StylistUpdate"},"Token":{"properties":{"access_token":{"type":"string","title":"Access Token"},"token_type":{"type":"string","title":"Token Type"}},"type":"object","required":["access_token","token_type"],"title":"Token"},"UserCreate":{"properties":{"email":{"type":"string","format":"email","title":"Email"},"username":{"type":"string","title":"Username"},"password":{"type":"string","title":"Password"}},"type":"object","required":["email","username","password"],"title":"UserCreate"},"UserResponse":{"properties":{"id":{"type":"integer","title":"Id"},"username":{"type":"string","title":"Username"},"email":{"type":"string","format":"email","title":"Email"},"role":{"type":"string","title":"Role"},"created_at":{"type":"string","format":"date-time","title":"Created At"}},"type":"object","required":["id","username","email","role","created_at"],"title":"UserResponse"},"UserUpdate":{"properties":{"email":{"type":"string","format":"email","title":"Email"},"username":{"type":"string","title":"Username"}},"type":"object","required":["email","username"],"title":"UserUpdate"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}},"securitySchemes":{"OAuth2PasswordBearer":{"type":"oauth2","flows":{"password":{"scopes":{},"tokenUrl":"login"}}}}}}